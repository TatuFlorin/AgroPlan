// <auto-generated />
using System;
using AgroPlan.Property.AgroPlan.Property.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AgroPlan.Property.Api.Infrastructure.Migrations
{
    [DbContext(typeof(PropertyContext))]
    partial class PropertyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AgroPlan.Property.AgroPlan.Property.Core.OwnerAggregate.Owner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("AgroPlan.Property.AgroPlan.Property.Core.OwnerAggregate.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParcelId")
                        .HasColumnName("ParcelId")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalBlockId")
                        .HasColumnName("PhysicalBlockId")
                        .HasColumnType("int");

                    b.Property<float>("Surface")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("AgroPlan.Property.AgroPlan.Property.Core.OwnerAggregate.Owner", b =>
                {
                    b.OwnsOne("AgroPlan.Property.AgroPlan.Property.Core.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasColumnType("nvarchar(20)")
                                .HasMaxLength(20);

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnName("LastName")
                                .HasColumnType("nvarchar(20)")
                                .HasMaxLength(20);

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("AgroPlan.Property.AgroPlan.Property.Core.ValueObjects.Surface", "TotalSurface", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<float>("Value")
                                .HasColumnName("TotalSurface")
                                .HasColumnType("real");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });
                });

            modelBuilder.Entity("AgroPlan.Property.AgroPlan.Property.Core.OwnerAggregate.Property", b =>
                {
                    b.HasOne("AgroPlan.Property.AgroPlan.Property.Core.OwnerAggregate.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AgroPlan.Property.AgroPlan.Property.Core.ValueObjects.Neighbors", "Neighbors", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("East_Neighbor")
                                .IsRequired()
                                .HasColumnName("EastNeighbor")
                                .HasColumnType("nvarchar(30)")
                                .HasMaxLength(30);

                            b1.Property<string>("North_Neighbor")
                                .IsRequired()
                                .HasColumnName("NorthNeighbor")
                                .HasColumnType("nvarchar(30)")
                                .HasMaxLength(30);

                            b1.Property<string>("South_Neighbor")
                                .IsRequired()
                                .HasColumnName("SouthNeighbor")
                                .HasColumnType("nvarchar(30)")
                                .HasMaxLength(30);

                            b1.Property<string>("West_Neighbor")
                                .IsRequired()
                                .HasColumnName("WestHeighbor")
                                .HasColumnType("nvarchar(30)")
                                .HasMaxLength(30);

                            b1.HasKey("PropertyId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
