// <auto-generated />
using System;
using AgroPlan.Planification.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AgroPlan.Planification.Api.Infrastructure.Migrations
{
    [DbContext(typeof(PlanContext))]
    [Migration("20200513114112_FixSomeBugs")]
    partial class FixSomeBugs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.Crop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("planification_id")
                        .HasColumnName("planification_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("type_id")
                        .HasColumnName("type_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_crop");

                    b.HasIndex("planification_id")
                        .HasName("ix_crops_planification_id");

                    b.HasIndex("type_id")
                        .HasName("ix_crops_type_id");

                    b.ToTable("crops");
                });

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.CropType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_crop_types");

                    b.ToTable("croptypes");
                });

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.Planification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnName("planification_year")
                        .HasColumnType("integer");

                    b.Property<string>("client_id")
                        .HasColumnName("client_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_planifications");

                    b.HasIndex("client_id")
                        .HasName("ix_planification_client_id");

                    b.ToTable("planification");
                });

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.Client", b =>
                {
                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.ClientName", "Name", b1 =>
                        {
                            b1.Property<string>("ClientId")
                                .HasColumnName("id")
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .HasColumnName("first_name")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnName("last_name")
                                .HasColumnType("text");

                            b1.HasKey("ClientId")
                                .HasName("pk_clients");

                            b1.ToTable("clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId")
                                .HasConstraintName("fk_client_name_clients_client_id");
                        });

                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.PhoneNumber", "Phone", b1 =>
                        {
                            b1.Property<string>("ClientId")
                                .HasColumnName("id")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnName("phone_number")
                                .HasColumnType("text");

                            b1.HasKey("ClientId")
                                .HasName("pk_clients");

                            b1.ToTable("clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId")
                                .HasConstraintName("fk_phone_number_clients_client_id");
                        });

                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.Surface", "UsageSurface", b1 =>
                        {
                            b1.Property<string>("ClientId")
                                .HasColumnName("id")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnName("usage_surface")
                                .HasColumnType("real");

                            b1.HasKey("ClientId")
                                .HasName("pk_clients");

                            b1.ToTable("clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId")
                                .HasConstraintName("fk_clients_clients_id");
                        });
                });

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.Crop", b =>
                {
                    b.HasOne("AgroPlan.Planification.Core.Model.Aggregate.Planification", "Planification")
                        .WithMany("Crops")
                        .HasForeignKey("planification_id")
                        .HasConstraintName("fk_crop_planifications_planification_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgroPlan.Planification.Core.Model.Aggregate.CropType", "Type")
                        .WithMany()
                        .HasForeignKey("type_id")
                        .HasConstraintName("fk_crop_crop_types_type_id");

                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.CropDuration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("CropId")
                                .HasColumnName("id")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Value")
                                .HasColumnName("duration")
                                .HasColumnType("integer");

                            b1.HasKey("CropId")
                                .HasName("pk_crop");

                            b1.ToTable("crops");

                            b1.WithOwner()
                                .HasForeignKey("CropId")
                                .HasConstraintName("fk_crop_duration_crops_crop_id");
                        });

                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.Surface", "Surface", b1 =>
                        {
                            b1.Property<Guid>("CropId")
                                .HasColumnName("id")
                                .HasColumnType("uuid");

                            b1.Property<float>("Value")
                                .HasColumnName("surface")
                                .HasColumnType("real");

                            b1.HasKey("CropId")
                                .HasName("pk_crop");

                            b1.ToTable("crops");

                            b1.WithOwner()
                                .HasForeignKey("CropId")
                                .HasConstraintName("fk_crops_crops_id");
                        });
                });

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.CropType", b =>
                {
                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.Code", "CropCode", b1 =>
                        {
                            b1.Property<Guid>("CropTypeId")
                                .HasColumnName("id")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnName("crop_code")
                                .HasColumnType("integer");

                            b1.HasKey("CropTypeId")
                                .HasName("pk_crop_types");

                            b1.ToTable("croptypes");

                            b1.WithOwner()
                                .HasForeignKey("CropTypeId")
                                .HasConstraintName("fk_code_croptypes_crop_type_id");
                        });

                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.Name", "CropName", b1 =>
                        {
                            b1.Property<Guid>("CropTypeId")
                                .HasColumnName("id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnName("crop_name")
                                .HasColumnType("text");

                            b1.HasKey("CropTypeId")
                                .HasName("pk_crop_types");

                            b1.ToTable("croptypes");

                            b1.WithOwner()
                                .HasForeignKey("CropTypeId")
                                .HasConstraintName("fk_name_croptypes_crop_type_id");
                        });
                });

            modelBuilder.Entity("AgroPlan.Planification.Core.Model.Aggregate.Planification", b =>
                {
                    b.HasOne("AgroPlan.Planification.Core.Model.Aggregate.Client", "Client")
                        .WithMany()
                        .HasForeignKey("client_id")
                        .HasConstraintName("fk_planifications_clients_client_id");

                    b.OwnsOne("AgroPlan.Planification.Core.Model.ValueObjects.Surface", "Surface", b1 =>
                        {
                            b1.Property<Guid>("PlanificationId")
                                .HasColumnName("id")
                                .HasColumnType("uuid");

                            b1.Property<float>("Value")
                                .HasColumnName("surface")
                                .HasColumnType("real");

                            b1.HasKey("PlanificationId")
                                .HasName("pk_planifications");

                            b1.ToTable("planification");

                            b1.WithOwner()
                                .HasForeignKey("PlanificationId")
                                .HasConstraintName("fk_planification_planification_id");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
